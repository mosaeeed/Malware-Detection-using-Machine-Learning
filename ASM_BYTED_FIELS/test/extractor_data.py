# Import Libraries
import pefile
from PIL import Image
import numpy as np
import csv
import string
import pandas as pd
from pyparsing import oneOf,Word,hexnums,Optional,WordEnd,alphas,alphanums


################################################# Bytes ############################################################## 
## 1. extract bytes file from an exe
def extract_bytes(exe_path):
    pe = pefile.PE(exe_path)

    data = []
    for section in pe.sections:
        data += section.get_data()

    ea = pe.sections[0].PointerToRawData

    output = ""
    for i in range(0, len(data), 16):
        output += str(hex(ea) + " " + bytes(data[i:i+16]).hex(' ') + "\n")
        ea += 16

    with open("output/out.bytes", "w") as f:
        f.write(output)

    return "output/out.bytes"


## 2. function to converte bytes to image
def byte_to_image(bytes_path):
    # Fixied Width For Image
    width = 1366
    hexar = []
    with open(bytes_path, 'rb') as f: 
        for line in f:
            hexar.extend(int(el, 16) for el in line.split()[1:] if el != b'??')
    print(len(hexar)) 
    if len(hexar)!=0:
        rn = len(hexar) // width
        fh = np.reshape(hexar[:rn * width], (-1, width))
        fh=  np.uint8(fh)
        print(bytes_path,'  ',fh.shape)
        img = Image.fromarray(fh)
        img.save("output/img.png")
        print("Finised {} ".format(bytes_path) )
    return "output/img.png"

## 3. function to resize the image
def img_resizer(img):
    rimg=Image.open(img)
    rimg = rimg.resize((32, 32), Image.BICUBIC)
    rimg.save("output/32.png")
    print('finised resized img')
    return "output/32.png"

## 4. function to converte img*32 to csv data
def img_to_csv(img):
    data_to_write = []
    img = np.asarray(Image.open(img))
    img = img.flatten()
    img= img.tolist()
    data_to_write.append(img)
    print('finised write img to csv')
    # Following commands generate the CSV from the values store in data_to_write list
    myFile = open('output/bytes_data_to_test.csv', 'w', newline='')  
    with myFile:  
        writer = csv.writer(myFile)
        writer.writerows(data_to_write)
    print('finised convert img to csv')
    return 'output/bytes_data_to_test.csv'    

#################################################### ASM #################################################################
## 1. extract asm file fron exe
def extract_asm(file_path):
    return 'output/out.asm'



## 2. Convert asm file to txt file
def convert_asm_to_txt(asm_file):
    hex_integer = Word(hexnums) + WordEnd()
    line = hex_integer + Optional((hex_integer*(1,))("instructions") + Word(alphas,alphanums)("opcode"))
    opcode_list = []
    asm_list = []
    with open(asm_file,encoding='ISO-8859-1') as f:
        lines = f.readlines()
        for source_line in lines:
            if source_line=="\n":
                continue        
            section=source_line[:source_line.find(':')+1]
            result = line.parseString(source_line[source_line.find(':')+1:])
            if "opcode" in result:
                opcod=result.opcode
                x=section+' '+opcod
                asm_list.append(x)
                if opcod not in opcode_list:
                    opcode_list.append(str(result.opcode))
    with open('output/out.txt', "a") as file_prime:
        for i in asm_list:
            file_prime.write(str(i)+ '\n')
    np.save('output/opc_list.npy', opcode_list)
    print('finised convert asm to txt')
    return 'output/out.txt'
    
## 3. convert txt to csv
def txt_to_csv(txt_file):
    # load opcode list 
    opc=np.load('output/opc_list.npy')
    opc=opc.tolist()
    opc.append('ID')
    opc.append('LABEL')
    temp=[0]*len(opc)
    data_to_write=[]
    data_to_write.append(opc)
    # open the asm file
    with open(txt_file) as f:
        lis=f.readlines()
        for source_lin in lis:
            if source_lin=="\n":
                continue    
            opco=source_lin[source_lin.find(':')+2:source_lin.find('\\')]         
            temp[opc.index(opco)]=temp[opc.index(opco)]+1
    ##=================In case of section use this=============================================
            section=source_lin[:source_lin.find(':')+1]
            section=section.translate({ord(c): None for c in string.whitespace})
    ##========================================================================================
        data_to_write.append(temp)


    myFile = open('output/data_opcode.csv', 'w', newline='')  
    with myFile:  
        writer = csv.writer(myFile)
        writer.writerows(data_to_write)
    print('finised convert txt to csv')
    return 'output/data_opcode.csv'    


####################################################### HYbrid #########################################################














































####################################################### MAIN ############################################################

if __name__ == "__main__":
    file_path = input("enter the path of exe : \t " )
    # bytes
    bytes_file = extract_bytes(file_path) 
    img = byte_to_image(bytes_file)
    rimg = img_resizer(img)
    bytes_data = img_to_csv(rimg)
    # asm
    asm_file = extract_asm(file_path)
    txt_file = convert_asm_to_txt(asm_file)
    csv_file = txt_to_csv(txt_file)
    asm_data = reduce_opcode(csv_file)

    # hybrid
