"""
The stratified_data takes three parameters, target_file, new_file
(name of the file where to store new stratified data) and splitting rate.
In Section-1 of the following code data, name and labels are read from CSV (numpy array format)
and converted to list for further processing. As samples are in cluster form,
so for the purpose of splitting, started index of each group is stored in Section-2.
Random but stratified indexes of samples are pick from each group and store in the stratified_sample
list variable in Section-3. In Section-4, against each stored index in stratified_sample list data of
samples along with their name and labels store in data_to_write list for writing it to the CSV

"""

# Import Libraries
import numpy
import random
import csv
from math import floor

# Strafied Data Function
def stratified_data(target_file,new_file,spliting_rate=0.2):
    
#Section-1
    trainlabel = numpy.genfromtxt(target_file, delimiter=",", dtype=str)
    FileName=trainlabel[0:,-2]
    dat=trainlabel[0:,0:-2]
    dat=dat.astype(numpy.float)
    Label=trainlabel[0:, -1]
    Label=Label.astype(numpy.int)    
    dat=dat.tolist()
    FileName = FileName.tolist()
    Label=Label.tolist()

#Section-2
    record=[]
    b=[]
    count=0
    temp=[]
    starting_index=0

    for i in Label:
        if i not in b:
            if starting_index!=0:
                temp.append(count)
                record.append(temp)
            #     print(temp)
                temp=[]
                count=0
            b.append(i)
            temp.append(i)
            temp.append(starting_index)
        count+=1
        starting_index += 1
    temp.append(count)
    record.append(temp)
    
#Section-3
    stratified_sample=[]
    for i in record:
        count=0
        temp=[]
        while count<=floor(i[2]*spliting_rate):
            a=random.randint(i[1],(i[1]+i[2]-1))
            if a not in temp:
                #      print(a)
                count+=1
                temp.append(a)
        stratified_sample.append(temp)
#Section-4
    data_to_write=[]
    count=0
    c=0
    for i in stratified_sample:
        c+=1
        print('Class ',c,' samples = ',len(i))
        count+=len(i)
        for j in i:
            a=dat[j]
            a.append(FileName[j].strip('"'))
            a.append(Label[j])
            data_to_write.append(a)
    print('Total samples ',count)

    myFile = open(new_file, 'w', newline='')  
    with myFile:  
        writer = csv.writer(myFile)
        writer.writerows(data_to_write)
        

# Split Data Function To train and Validation        
def train_validation_split(data_csv,train_csv,validation_csv,training_data_rate=0.5):
    
    data_to_write=[]
    to_list=[]
    
    stratified_data(data_csv,train_csv,training_data_rate)
    
    new_train_data = numpy.genfromtxt(train_csv, delimiter=",", dtype=str)
    new_whole_data = numpy.genfromtxt(data_csv, delimiter=",", dtype=str)
    
    for i in new_train_data:
    
        to_list.append(i[-2])
    
    for i in new_whole_data:
        a=i[-2].strip('"')
        if a not in to_list:
        
            data_to_write.append(i)
    myFile = open(validation_csv, 'w', newline='')  
    
    with myFile:  
        writer = csv.writer(myFile)
        writer.writerows(data_to_write)


data='data_new.csv'

train_full='data_to_traFull.csv'
test='data_to_test.csv'
train='data_to_tra.csv'
valid='data_to_val.csv'

#0.75 means 75% data will stores in train_full and 25% will be in test  
print('No. of samples in different classes that store in data_to_traFull according to given rate\n')
train_validation_split(data,train_full,test,0.75)
print('No. of samples in different classes that store in data_to_tra according to given rate\n')
train_validation_split(train_full,train,valid,0.75)