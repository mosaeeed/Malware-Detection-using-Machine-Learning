from tabnanny import check
import PyQt5
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.uic import loadUiType

import os
from os import path
import sys
import psutil
import threading
import time


# import files
sys.path.insert(0, './PE_Header')
from detector import detect


FORM_CLASS, _=loadUiType(path.join(path.dirname(__file__),"home.ui"))
class MEM(QThread,FORM_CLASS):
    """
    Runs a ram thread.
    """
    x = pyqtSignal(int)

    def run(self):
        try:
            while True:
                value = psutil.virtual_memory().percent
                self.x.emit(int(value))
                time.sleep(1)

        except:
            self.statusBar.showMessage("Error in getting Ram informations")
class PROC(QThread,FORM_CLASS):
    """
    Runs a cpu thread.
    """
    y = pyqtSignal(int)

    def run(self):
        try:
            while True:
                value = psutil.cpu_percent()
                self.y.emit(int(value))
                time.sleep(1)
        except:
            self.statusBar.showMessage("Error in getting Cpu informations")     
class DISK(QThread,FORM_CLASS):
    """
    Runs a disk thread.
    """
    z = pyqtSignal(int)

    def run(self):
        try:
            while True:
                obj_Disk = psutil.disk_usage('/')
                self.z.emit(int(obj_Disk.percent))
                time.sleep(1)            
        except:
            self.statusBar.showMessage("Error in getting disk informations")



FORM_CLASS, _=loadUiType(path.join(path.dirname(__file__),"home.ui"))
class MainApp(QMainWindow,FORM_CLASS):
    def __init__(self,parent=None):
        super(MainApp,self).__init__(parent)
        QMainWindow.__init__(self)
        self.setupUi(self)
        self.UI_Changes()
        self.Handle_Buttons()
        self.hidden = False
        self.StartThread()
        th = threading.Thread(target=self.setStatsInfo)
        th.setDaemon(True)
        th.start()

        
    def UI_Changes(self):
        self.tabWidget.setTabText(0, "Home")
        self.tabWidget.setTabText(1, "PC Scan")
        self.tabWidget.setTabText(2, "Folder Scan")
        self.tabWidget.setTabText(3, "File Scan")
        self.tabWidget.setTabText(4, "URL Scan")

    def Handle_Buttons(self):
        self.home_btn.clicked.connect(self.open_home)
        self.full_btn.clicked.connect(self.open_full)
        self.folder_btn.clicked.connect(self.open_folder)
        self.file_btn.clicked.connect(self.open_file)
        self.url_btn.clicked.connect(self.open_url)
        self.browse.clicked.connect(self.Handel_Browse_folder)
        self.browse_2.clicked.connect(self.Handel_Browse_file)
        #Click the buttons
        self.menu_btn.clicked.connect(self.hide_unhide)
        ## start file scan
        self.str_file_btn.clicked.connect(self.check_loc)
        ## Cancle Button
        self.exit.clicked.connect(exit)
        self.exit_2.clicked.connect(exit)
        self.exit_3.clicked.connect(exit)
        self.exit_4.clicked.connect(exit)




    ## side bar button function
    def open_home(self):
        self.tabWidget.setCurrentIndex(0)

    def open_full(self):
        self.tabWidget.setCurrentIndex(1)
    
    def open_folder(self):
        self.tabWidget.setCurrentIndex(2)
    
    def open_file(self):
        self.tabWidget.setCurrentIndex(3)
    
    def open_url(self):
        self.tabWidget.setCurrentIndex(4)


    ## Menu hide Function 
    def hide_unhide(self):
        if self.hidden:
            self.side_menu.show()
            self.hidden=False
        else:
            self.side_menu.hide()
            self.hidden=True

    ## Home Page Function
    def StartThread(self):
        self.ram_obj = MEM()
        self.cpu_obj = PROC() 
        self.disk_obj = DISK()

        self.ram_obj.x.connect(self.setRam)
        self.cpu_obj.y.connect(self.setCpu)
        self.disk_obj.z.connect(self.setDisk)
        self.ram_obj.start()
        self.cpu_obj.start()
        self.disk_obj.start()

    def setStatsInfo(self):
        while True:
            obj_Disk = psutil.disk_usage('/')
            time.sleep(1)


    def setRam(self, value):
        self.RamProgressBar.setValue(value)
    def setCpu(self, value):
        self.CpuProgressBar.setValue(value)    
    def setDisk(self,value):
        self.DiskProgressBar.setValue(value)
    

    def exit():
        sys.exit()



  
    ######################################## Full Scan ##################################################




    ######################################## Folder Scan ################################################
    def Handel_Browse_folder(self):
        loc = str(QFileDialog.getExistingDirectory(self, 'Select a directory', QDir.rootPath()))
        self.location.setText(loc)
    


    ##################################### FILE Scan ###################################################

    ## Browse Btn Function
    def Handel_Browse_file(self):
        fileName = QFileDialog.getOpenFileNames(None,  QDir.rootPath() , '*.exe')[0]
        self.location_2.setText(str(fileName[0]))

        
    def check_loc(self):
        if not self.location_2.text():
            mess = "please select the file"
            self.location_2.setPlaceholderText(mess)
        else:
            path = str(self.location_2.text())
            self.location_2.clear()
            res = detect(path)
            
            if res == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
            
                # setting message for Message Box
                msg.setText("your system is safe")
                
                # setting Message box window title
                msg.setWindowTitle("Result")
                
                # declaring buttons on Message Box
                msg.setStandardButtons(QMessageBox.Ok)
                
                # start the app
                retval = msg.exec_()

            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
            
                # setting message for Message Box
                msg.setText("there are some malware you want to remove it ")
                
                # setting Message box window title
                msg.setWindowTitle("Scan Detailes")
                
                # declaring buttons on Message Box
                msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
                
                # start the app
                retval = msg.exec_()

                # delete Malware
                if retval == QMessageBox.Ok:
                    os.remove(path)


 
    ##################################### url Scan ###################################################



def main():
    app = QApplication(sys.argv)
    window =  MainApp()
    window.show()
    app.exec_() #infinte loop
                  
if __name__ == "__main__":
    main()